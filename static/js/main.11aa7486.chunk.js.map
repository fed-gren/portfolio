{"version":3,"sources":["components/Header.js","components/Layout.js","components/Card.js","components/Loader.js","components/Gallery.js","pages/Projects.js","App.js","serviceWorker.js","index.js"],"names":["Header","_ref","title","react_default","a","createElement","Layout","children","Fragment","className","Card","thumb","style","backgroundImage","concat","Loader","color","react_loading_default","type","height","width","Gallery","_useState","useState","_useState2","Object","slicedToArray","projects","setProjects","callApi","fetch","then","response","json","catch","err","console","log","getProjects","asyncToGenerator","regenerator_default","mark","_callee","temp","wrap","_context","prev","next","sent","value","stop","apply","this","arguments","useEffect","length","map","project","index","key","Projects","App","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2RAGeA,2BAAA,SAAAC,GAAe,IAAZC,EAAYD,EAAZC,MAChB,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UAAKH,MCFII,EAAA,SAAAL,GAAkB,IAAfM,EAAeN,EAAfM,SAChB,OACEJ,EAAAC,EAAAC,cAAAF,EAAAC,EAAAI,SAAA,KACEL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UACbN,EAAAC,EAAAC,cAACL,EAAD,CAAQE,MAAM,cACbK,mCCPMG,SAAA,SAAAT,GAAsB,IAAnBU,EAAmBV,EAAnBU,MAAOT,EAAYD,EAAZC,MACvB,OACEC,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QACbN,EAAAC,EAAAC,cAAA,OAAKI,UAAU,QAAQG,MAAO,CAAEC,gBAAe,OAAAC,OAASH,EAAT,QAC/CR,EAAAC,EAAAC,cAAA,OAAKI,UAAU,SAASP,sBCHfa,EAAA,SAAAd,GAAa,IAAXe,EAAWf,EAAXe,MACf,OACEb,EAAAC,EAAAC,cAAA,OAAKI,UAAU,UACbN,EAAAC,EAAAC,cAACY,EAAAb,EAAD,CAAcc,KAAK,UAAUF,MAAOA,EAAOG,OAAO,OAAOC,MAAM,WCDtDC,EAAA,WAAM,IAAAC,EACaC,mBAAS,IADtBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GACFI,EADEJ,EAAA,GAEbK,EAAU,WACd,OAAOC,MAAM,gDACVC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,IACbC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAGxBG,EAAW,eAAArC,EAAAwB,OAAAc,EAAA,EAAAd,CAAAe,EAAApC,EAAAqC,KAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAApC,EAAAwC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACClB,IADD,OACZc,EADYE,EAAAG,KAGlBnB,IAAUE,KAAK,SAAAkB,GAAK,OAAIb,QAAQC,IAAIY,KACpCrB,EAAYe,GAJM,wBAAAE,EAAAK,SAAAR,MAAH,yBAAAzC,EAAAkD,MAAAC,KAAAC,YAAA,GAOjBC,oBAAU,WACRhB,KACC,IASH,OACEnC,EAAAC,EAAAC,cAAA,OAAKI,UAA+B,IAApBkB,EAAS4B,OAAe,UAAY,WAC7B,IAApB5B,EAAS4B,OAAepD,EAAAC,EAAAC,cAACU,EAAD,CAAQC,MAAM,SARnBW,EAAS6B,IAAI,SAACC,EAASC,GAC3C,OAAOvD,EAAAC,EAAAC,cAACK,EAAD,CAAMR,MAAOuD,EAAQvD,MAAOS,MAAO8C,EAAQ9C,MAAOgD,IAAKD,QCvBrDE,EAAA,WACb,OACEzD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACgB,EAAD,eCCOwC,MAJf,WACE,OAAO1D,EAAAC,EAAAC,cAACuD,EAAD,OCMWE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC","file":"static/js/main.11aa7486.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/header.scss\";\n\nexport default ({ title }) => {\n  return (\n    <header>\n      <h1>{title}</h1>\n    </header>\n  );\n};\n","import React from \"react\";\nimport \"../styles/layout.scss\";\nimport Header from \"./Header\";\n\nexport default ({ children }) => {\n  return (\n    <>\n      <div className=\"layout\">\n        <Header title=\"Portfolio\" />\n        {children}\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\n\nexport default ({ thumb, title }) => {\n  return (\n    <div className=\"card\">\n      <div className=\"thumb\" style={{ backgroundImage: `url(${thumb})` }} />\n      <div className=\"title\">{title}</div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\n\nexport default ({color}) => {\n  return (\n    <div className=\"loader\">\n      <ReactLoading type=\"bubbles\" color={color} height=\"2rem\" width=\"3rem\" />\n    </div>\n  );\n};\n","import \"../styles/gallery.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport Card from \"../components/Card\";\nimport Loader from \"../components/Loader\";\n\nexport default () => {\n  const [projects, setProjects] = useState([]);\n  const callApi = () => {\n    return fetch(\"https://gren-apis.herokuapp.com/api/projects\")\n      .then(response => response.json())\n      .then(json => json)\n      .catch(err => console.log(err));\n  };\n\n  const getProjects = async () => {\n    const temp = await callApi();\n    //_callApi() 실행완료 전까지 아래 코드는 실행되지 않음 -> ?\n    callApi().then(value => console.log(value));\n    setProjects(temp);\n  };\n\n  useEffect(() => {\n    getProjects();\n  }, []);\n\n  const renderProjects = () => {\n    const projectsCards = projects.map((project, index) => {\n      return <Card title={project.title} thumb={project.thumb} key={index} />;\n    });\n    return projectsCards;\n  };\n\n  return (\n    <div className={projects.length === 0 ? \"loading\" : \"gallery\"}>\n      {projects.length === 0 ? <Loader color=\"#aaa\"/> : renderProjects()}\n    </div>\n  );\n};\n","import React from \"react\";\nimport Layout from \"../components/Layout\";\nimport Gallery from \"../components/Gallery\";\n\nexport default () => {\n  return (\n    <div>\n      <Layout>\n        <Gallery />\n      </Layout>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./styles/style.scss\";\nimport Projects from \"./pages/Projects\";\nimport \"./App.css\";\n\nfunction App() {\n  return <Projects />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}